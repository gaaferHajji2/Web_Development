In this example, we have the core feature folder that contains the main application files and the feature folder that include the feature's 
files. An example feature would be a user management feature that includes the authentication and authorization logic. To understand this 
better, let's review a single feature's folder structure:
	1--> The server folder is where you keep your feature's server logic and is divided into the following folders that represent a 
	separation of functionality to comply with the MVC pattern:
		a--> The controllers folder is where you keep your feature's Express controllers
		b--> The models folder is where you keep your feature's Express models
		c--> The routes folder is where you keep your feature's Express routing middleware
		d--> The views folder is where you keep your feature's Express views
		e--> The config folder is where you keep your feature's server configuration files
		f--> The env folder is where you keep your feature's environment server configuration files
		g--> The feature.server.config.js file is where you configure your feature

	2--> The client folder is where you keep your feature client-side files and is divided into the following folders that represent a 
	separation of functionality to comply with the MVC pattern:
		a--> The config folder is where you keep your feature's AngularJS configuration files
		b--> The controllers folder is where you keep your feature's AngularJS controllers
		c--> The css folder is where you keep your feature's CSS files
		d--> The directives folder is where you keep your feature's AngularJS directives
		e--> The filters folder is where you keep your feature's AngularJS filters
		f--> The img folder is where you keep your feature's image files
		g--> The views folder is where you keep your feature's AngularJS views
		h--> The feature1.client.module.js file is where you initialize your feature's AngularJS module

As you can see, the vertical folder structure is very useful for large projects where the number of features is unlimited and each feature 
includes a substantial amount of files. It will allow large teams to work together and maintain each feature separately, and it can also be 
useful to share features between different applications.

Although these are two distinctive types of most application structures, the reality is that the MEAN stack can be assembled in many 
different ways. It's even likely for a team to structure their project in a way that combines these two approaches, so essentially it is up 
to the project leader to decide which structure to use.
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
