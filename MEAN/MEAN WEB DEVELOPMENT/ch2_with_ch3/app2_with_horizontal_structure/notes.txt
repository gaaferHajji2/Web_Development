The app folder is where you keep your Express application logic and is divided into the following folders that represent a separation of 
functionality to comply with the MVC pattern:
	1--> The controllers folder is where you keep your Express application controllers
	2-->  The models folder is where you keep your Express application models
	3--> The routes folder is where you keep your Express application routing middleware
	4--> The views folder is where you keep your Express application views
	+++++++++++++++++++++++++++++++++++++++++++++++++++
The config folder is where you keep your Express application configuration files. In time you'll add more modules to your application and 
each module will be configured in a dedicated JavaScript file, which is placed inside this folder. Currently, it contains several files and 
folders, which are as follows:
	1--> The env folder is where you'll keep your Express application environment configuration files
	2--> The config.js file is where you'll configure your Express application
	3--> The express.js file is where you'll initialize your Express application
	+++++++++++++++++++++++++++++++++++++++++++++++++++
The public folder is where you keep your static client-side files and is divided into the following folders that represent a separation of 
functionality to comply with the MVC pattern:
	1--> The config folder is where you keep your AngularJS application configuration files
	2--> The controllers folder is where you keep your AngularJS application controllers
	3--> The css folder is where you keep your CSS files
	4--> The directives folder is where you keep your AngularJS application directives
	5--> The filters folder is where you keep your AngularJS application filters
	6--> The img folder is where you keep your image files
	7--> The views folder is where you keep your AngularJS application views
	8--> The application.js file is where you initialize your AngularJS application
	+++++++++++++++++++++++++++++++++++++++++++++++++++
As you can see, the horizontal folder structure is very useful for small projects where the number of features is limited, and so files can 
be conveniently placed inside folders that represent their general roles. Nevertheless, to handle large projects, where you'll have many 
files that handle certain features, it might be too simplistic. In that case, each folder could be overloaded with too many files, and you'll 
get lost in the chaos. A better approach would be to use a vertical folder structure.
	+++++++++++++++++++++++++++++++++++++++++++++++++++
