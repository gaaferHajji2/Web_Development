1--> Generating Your Server Certificate:
----------------------------------------
In order for the certificate authority to generate your certificate, you’ll 
need to generate keys on your server and then upload those to the certificate 
authority.

First, create a directory to store your keys. People have differing opinions 
on the best place to store these, but for this example, let’s stick with
/usr/bin/ssl/

Now let’s generate the private RSA key with the code:
$ openssl genrsa -out yourApp.key 1024

Then you will generate the CSR using the RSA key:
$ openssl req -new -key yourApp.key -out yourApp.csr

You’ll now be asked several questions about smart defaults. The main one to pay
attention to is “Common Name,” which should match your domain name, for example,
“yourApp.com”.

Now you should have two new files:
/usr/bin/ssl/yourApp.key
/usr/bin/ssl/yourApp.csr

Important Note: Before you do anything else, make a backup copy of the .key 
file somewhere. Seriously, make two backup copies. If you lose the private 
key, you’ll need to buy a new certificate, and servers crash all the time.
	+++++++++++++++++++++++++++++++++++++++
2--> Obtaining an SSL Certificate:
----------------------------------
The first step to getting up and running on HTTPS is to obtain a certificate. There are inexpensive/free certificates available from some 
certificate authorities, but many of them won’t come preinstalled on the popular web browsers. So that makes them useless for external-facing 
sites. If you’re running an internal application, then less expensive alternatives and self-signed certificates are valid options. For 
everyone else, you may need to purchase a certificate. On the bright side, Let’s Encrypt recently launched, which is a free certificate 
authority.

First, I recommend checking with your DNS provider to see if they offer any type of discounted or easy to set up certificates. For example, 
DNSimple is the DNS provider I use, and they offer subscription payments for certificates at a large discount(From The Book Example).

If your DNS provider does not provide certificates, Symantec/VeriSign is a well-respected certificate authority.

You’ll then need to walk through whatever process your chosen certificate authority has in place for setting up your certificate. Usually 
you’ll just upload your server certificate (yourApp.csr) and they will e-mail you the signed certificate. It’s worth noting here that Let’s 
Encrypt offers an automated process for set up as well.

Your certificate authority will provide you with the signed certificate, here we will call it yourAppSigned.crt. Copy this to your server; 
for this example, I’ll use the following path: /usr/bin/ssl/yourAppSigned.crt (From The Previous Example).
	+++++++++++++++++++++++++++++++++++++++
3--> Verifying a Certificate:
-----------------------------
There are many web sites and tools for verifying SSL certificates. DigiCert ( https://www.digicert.com/ ) provides a quick and easy interface
where you enter your web site address and it returns information about your certificate. Most browsers support similar functionality as well 
by visiting the site and then clicking the green lock symbol to drill down into the certificate information.
	+++++++++++++++++++++++++++++++++++++++

